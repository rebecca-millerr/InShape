{"ast":null,"code":"var _jsxFileName = \"/Users/Rebecca/Documents/soph/comp20/final/InShape/client/src/Meals.js\";\nimport React from 'react';\nimport MealSection from './MealSection';\nimport './Meals.css';\nimport MealSummary from './MealSummary';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\n\nclass Meals extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      calories: '',\n      diet: '',\n      allergies: '',\n      data: null,\n      recipes: [],\n      food: [],\n      refreshes: -1,\n      loggedIn: false\n    };\n    this.getUserInfo = this.getUserInfo.bind(this);\n    this.fetchMeals = this.fetchMeals.bind(this);\n    this.fetchRecipes = this.fetchRecipes.bind(this);\n    this.makeFood = this.makeFood.bind(this);\n  }\n\n  async componentDidMount() {\n    console.log(this.props.username);\n    this.setState({\n      loading: true\n    });\n    setTimeout(async () => {\n      await this.fetchMeals();\n    }, 3000);\n  }\n\n  async getUserInfo() {\n    let allergies = new Array(5); // initialize allergies array\n\n    const response = await fetch('/info/' + this.props.username); // get data\n\n    const json = await response.json(); // data to json\n\n    const user = json[0];\n\n    if (user) {\n      allergies[0] = user.allergy1;\n      allergies[1] = user.allergy2;\n      allergies[2] = user.allergy3;\n      allergies[3] = user.allergy4;\n      allergies[4] = user.allergy5; // use for loops to go through the 5 things in the array (array.length) \n\n      for (let i = 0; i < allergies.length; i++) {\n        if (allergies[i] === null || allergies[i] === 'undefined') {\n          allergies = allergies.splice(0, i);\n          break;\n        }\n      } // turn array into comma separated list\n\n\n      const allergyString = allergies.join(',');\n      console.log(allergyString);\n      this.setState({\n        allergies: allergyString\n      }); // get calories and make calories state\n\n      this.setState({\n        calories: user.calories\n      }); // get diet and account for 'none' and make diet state\n\n      this.setState({\n        diet: user.diet\n      });\n    }\n  }\n\n  async fetchMeals() {\n    this.setState({\n      loggedIn: this.props.username === '---' ? false : true,\n      loading: true\n    });\n    console.log(this.state.loggedIn);\n\n    if (!this.state.loggedIn) {\n      this.setState({\n        loading: false\n      });\n      return;\n    }\n\n    if (this.state.refreshes >= 5) {\n      alert('You\\'ve exceeded your daily refresh limit! Come back tomorrow!');\n      return;\n    }\n\n    console.log('fetch meals');\n    let counter = 0;\n\n    if (!this.state.calories) {\n      await this.getUserInfo();\n    }\n\n    console.log(this.state.calories);\n    console.log(this.state.diet);\n    console.log(this.state.allergies);\n    await fetch(\"https://api.spoonacular.com/recipes/mealplans/generate?\" + \"apiKey=8cb69cd631e04d3ea64a3ec35fdb783b&timeFrame=day\" + \"&targetCalories=\" + this.state.calories + \"&diet=\" + this.state.diet + \"&exclude\" + this.state.allergies).then(response => response.json()).then(data => {\n      this.setState(prevState => ({\n        data: data,\n        refreshes: prevState.refreshes + 1\n      }));\n      counter++;\n\n      if (counter === 1) {\n        this.fetchRecipes();\n      }\n\n      ;\n    });\n  }\n\n  async fetchRecipes() {\n    this.setState({\n      recipes: []\n    });\n    let counter = 0;\n\n    for (let i = 0; i < 3; i++) {\n      await fetch(\"https://api.spoonacular.com/recipes/\" + this.state.data.meals[i].id + \"/information?apiKey=8cb69cd631e04d3ea64a3ec35fdb783b\" + \"&includeNutrition=true\").then(response => response.json()).then(data => {\n        let tempRecipes = this.state.recipes.slice(0);\n        tempRecipes.push(data);\n        this.setState({\n          recipes: tempRecipes\n        });\n        counter++;\n      });\n\n      if (counter === 3) {\n        this.makeFood();\n      }\n    }\n  }\n\n  makeFood() {\n    this.setState({\n      food: []\n    });\n\n    for (let i = 0; i < 3; i++) {\n      let tempFood = this.state.food.slice(0);\n      const oneFood = {\n        id: i + 1,\n        name: this.state.data.meals[i].title,\n        imageSource: \"https://spoonacular.com/recipeImages/\" + this.state.data.meals[i].id + \"-240x150.jpg\",\n        prepTime: this.state.data.meals[i].readyInMinutes,\n        calories: Math.round(this.state.recipes[i].nutrition.nutrients[0].amount),\n        percentCarbs: this.state.recipes[i].nutrition.caloricBreakdown.percentCarbs,\n        percentFat: this.state.recipes[i].nutrition.caloricBreakdown.percentFat,\n        percentProtein: this.state.recipes[i].nutrition.caloricBreakdown.percentProtein,\n        servings: this.state.recipes[i].servings,\n        ingredients: this.state.recipes[i].nutrition.ingredients,\n        instructions: this.state.recipes[i].instructions\n      };\n      tempFood.push(oneFood);\n      this.setState({\n        food: tempFood,\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state.loading);\n\n    if (this.state.loading || this.state.food.length !== 3) {\n      console.log('loading');\n      return React.createElement(\"div\", {\n        className: \"Meals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"CallToAction\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Come back tomorrow for more!\"), React.createElement(\"p\", {\n        className: \"Loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    if (!this.state.loggedIn) {\n      console.log('logged out');\n      return React.createElement(\"div\", {\n        className: \"Meals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"CallToAction\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"Log in to see this page!\"));\n    }\n\n    const totalCals = this.state.data.nutrients.calories;\n    const totalCarbs = this.state.data.nutrients.carbohydrates;\n    const totalFat = this.state.data.nutrients.fat;\n    const totalProtein = this.state.data.nutrients.protein;\n    const mealSections = this.state.food.map(food => React.createElement(MealSection, {\n      key: food.id,\n      data: food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"Meals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CallToAction\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"Come back tomorrow for more!\"), React.createElement(\"p\", {\n      className: \"MealSubtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"If you want new options, just hit refresh! You're limited to 5 refreshes per day.\"), React.createElement(FontAwesomeIcon, {\n      icon: faRedo,\n      className: \"RefreshIcon\",\n      onClick: () => this.fetchMeals(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(MealSummary, {\n      cals: totalCals,\n      carbs: totalCarbs,\n      fat: totalFat,\n      protein: totalProtein,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), mealSections);\n  }\n\n}\n\nexport default Meals;","map":{"version":3,"sources":["/Users/Rebecca/Documents/soph/comp20/final/InShape/client/src/Meals.js"],"names":["React","MealSection","MealSummary","FontAwesomeIcon","faRedo","Meals","Component","constructor","state","loading","calories","diet","allergies","data","recipes","food","refreshes","loggedIn","getUserInfo","bind","fetchMeals","fetchRecipes","makeFood","componentDidMount","console","log","props","username","setState","setTimeout","Array","response","fetch","json","user","allergy1","allergy2","allergy3","allergy4","allergy5","i","length","splice","allergyString","join","alert","counter","then","prevState","meals","id","tempRecipes","slice","push","tempFood","oneFood","name","title","imageSource","prepTime","readyInMinutes","Math","round","nutrition","nutrients","amount","percentCarbs","caloricBreakdown","percentFat","percentProtein","servings","ingredients","instructions","render","totalCals","totalCarbs","carbohydrates","totalFat","fat","totalProtein","protein","mealSections","map"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport MealSection from './MealSection';\n\nimport './Meals.css';\nimport MealSummary from './MealSummary';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\n\nclass Meals extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading   : false,\n\n      calories  : '',\n      diet      : '',\n      allergies : '',\n\n      data      : null,\n      recipes   : [],\n      food      : [],\n\n      refreshes : -1,\n      loggedIn  : false\n    };\n\n    this.getUserInfo = this.getUserInfo.bind(this);\n\n    this.fetchMeals   = this.fetchMeals.bind(this);\n    this.fetchRecipes = this.fetchRecipes.bind(this);\n    this.makeFood     = this.makeFood.bind(this);\n  }\n\n  async componentDidMount() {\n\n    console.log(this.props.username)\n    this.setState ({\n      loading : true\n    });\n\n    setTimeout(async () => {\n      await this.fetchMeals();  \n    }, 3000);\n  }\n\n  async getUserInfo() {\n    let allergies = new Array(5); // initialize allergies array\n\n    const response = await fetch('/info/' + this.props.username); // get data\n    const json = await response.json() // data to json\n\n    const user = json[0]\n\n    if ( user ) {\n      allergies[0] = user.allergy1;\n      allergies[1] = user.allergy2;\n      allergies[2] = user.allergy3;\n      allergies[3] = user.allergy4; \n      allergies[4] = user.allergy5;\n\n        // use for loops to go through the 5 things in the array (array.length) \n        for ( let i = 0; i < allergies.length; i++ ) { \n          if ( allergies[i] === null || allergies[i] === 'undefined' ) {\n            allergies = allergies.splice(0, i);\n            break;\n          }\n        }\n\n      // turn array into comma separated list\n      const allergyString = allergies.join(',');\n      console.log(allergyString)\n\n        this.setState({\n          allergies : allergyString\n        });\n\n      // get calories and make calories state\n      this.setState({\n        calories : user.calories\n      });\n\n      // get diet and account for 'none' and make diet state\n      this.setState({\n        diet : user.diet\n      });\n    }\n  }\n\n  async fetchMeals() {\n\n    this.setState({\n      loggedIn : this.props.username === '---' ? false : true,\n      loading : true\n    })\n\n    console.log(this.state.loggedIn)\n    \n    if ( !this.state.loggedIn ) {\n      this.setState({\n        loading : false\n      })\n      return;\n    }\n\n    if ( this.state.refreshes >= 5 ) {\n      alert('You\\'ve exceeded your daily refresh limit! Come back tomorrow!');\n      return;\n    }\n    console.log('fetch meals')\n    let counter = 0;\n    if ( !this.state.calories ) {\n      await this.getUserInfo();\n    }\n\n    console.log(this.state.calories)\n    console.log(this.state.diet)\n    console.log(this.state.allergies)\n\n    await fetch(\"https://api.spoonacular.com/recipes/mealplans/generate?\" \n          + \"apiKey=8cb69cd631e04d3ea64a3ec35fdb783b&timeFrame=day\"\n          + \"&targetCalories=\" + this.state.calories + \"&diet=\" + this.state.diet \n          + \"&exclude\" + this.state.allergies)\n      .then(response => response.json())\n      .then(data => {\n        this.setState(prevState => ({\n          data      : data,\n          refreshes : prevState.refreshes + 1\n        }));\n        counter++;\n        if ( counter === 1 ) {\n          this.fetchRecipes();\n        };\n      });\n  }\n\n  async fetchRecipes() {\n\n    this.setState({\n      recipes : []\n    })\n    let counter = 0;\n    for ( let i = 0; i < 3; i++ ) {\n  \n      await fetch(\"https://api.spoonacular.com/recipes/\" \n                  + this.state.data.meals[i].id \n                  + \"/information?apiKey=8cb69cd631e04d3ea64a3ec35fdb783b\"\n                  + \"&includeNutrition=true\")\n        .then(response => response.json())\n        .then(data => {\n          let tempRecipes = this.state.recipes.slice(0);\n          tempRecipes.push(data);\n\n          this.setState({\n            recipes : tempRecipes\n          });  \n          counter++;\n        });\n\n        if ( counter === 3 ) {\n          this.makeFood();\n        }\n    }\n  }\n\n  makeFood() {\n\n    this.setState({\n      food : []\n    })\n    for ( let i = 0; i < 3; i++ ) {\n      let tempFood = this.state.food.slice(0);\n      const oneFood = {\n        id             : i + 1,\n        name           : this.state.data.meals[i].title,\n        imageSource    : \"https://spoonacular.com/recipeImages/\" + this.state.data.meals[i].id + \"-240x150.jpg\",\n        prepTime       : this.state.data.meals[i].readyInMinutes,\n        calories       : Math.round(this.state.recipes[i].nutrition.nutrients[0].amount),\n        percentCarbs   : this.state.recipes[i].nutrition.caloricBreakdown.percentCarbs,\n        percentFat     : this.state.recipes[i].nutrition.caloricBreakdown.percentFat,\n        percentProtein : this.state.recipes[i].nutrition.caloricBreakdown.percentProtein,\n        servings       : this.state.recipes[i].servings,\n        ingredients    : this.state.recipes[i].nutrition.ingredients,\n        instructions   : this.state.recipes[i].instructions\n      }\n\n      tempFood.push(oneFood);\n\n      this.setState({\n        food : tempFood,\n        loading : false\n      });\n    }\n  }\n\n  render() {\n\n    console.log(this.state.loading)\n\n    if ( this.state.loading || this.state.food.length !== 3 ) {\n      console.log('loading')\n      return (\n        <div className = \"Meals\">\n          <p className = \"CallToAction\">\n            Come back tomorrow for more!\n          </p>\n          <p className = \"Loading\">\n            Loading...\n          </p>\n        </div>\n      )\n    }\n\n    if ( !this.state.loggedIn ) {\n      console.log('logged out')\n      return (\n        <div className = \"Meals\">\n          <p className = \"CallToAction\">\n            Log in to see this page!\n          </p>\n        </div>\n      )\n    }\n\n    const totalCals    = this.state.data.nutrients.calories;\n    const totalCarbs   = this.state.data.nutrients.carbohydrates;\n    const totalFat     = this.state.data.nutrients.fat;\n    const totalProtein = this.state.data.nutrients.protein;\n    \n\n    const mealSections = this.state.food.map(food => \n      <MealSection\n        key = {food.id}\n        data = {food}\n      />\n    );\n\n    return(\n      <div className = \"Meals\">\n        <p className = \"CallToAction\">\n          Come back tomorrow for more! \n        </p>\n        <p className = \"MealSubtitle\">\n          If you want new options, just hit refresh! You're limited to 5 refreshes per day.\n        </p>\n        <FontAwesomeIcon \n          icon = {faRedo} \n          className = \"RefreshIcon\"\n          onClick = {() => this.fetchMeals()}\n        />\n        <MealSummary \n          cals    = {totalCals} \n          carbs   = {totalCarbs}\n          fat     = {totalFat}\n          protein = {totalProtein}\n        />\n        {mealSections}\n      </div>\n    )\n  }\n}\n\nexport default Meals;"]},"metadata":{},"sourceType":"module"}