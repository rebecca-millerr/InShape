{"ast":null,"code":"var _jsxFileName = \"/Users/Rebecca/Documents/soph/comp20/final/InShape/client/src/Meals.js\";\nimport React from 'react';\nimport MealSection from './MealSection';\nimport './Meals.css';\nimport MealSummary from './MealSummary';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\n\nclass Meals extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      calories: '',\n      diet: '',\n      allergies: '',\n      data: null,\n      recipes: [],\n      food: [],\n      refreshes: -1\n    };\n    this.getUserInfo = this.getUserInfo.bind(this);\n    this.fetchMeals = this.fetchMeals.bind(this);\n    this.fetchRecipes = this.fetchRecipes.bind(this);\n    this.makeFood = this.makeFood.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    setTimeout(async () => {\n      await this.fetchMeals();\n    }, 3000);\n    this.setState({\n      loading: false\n    });\n  }\n\n  async getUserInfo() {\n    let allergies = new Array(5); // initialize allergies array\n\n    console.log(this.props.username);\n    const response = await fetch('/info/' + this.props.username); // get data\n\n    console.log(response);\n    const json = await response.json(); // data to json\n\n    console.log(json);\n    const user = json[0];\n    allergies[0] = user.allergy1;\n    allergies[1] = user.allergy2;\n    allergies[2] = user.allergy3;\n    allergies[3] = user.allergy4;\n    allergies[4] = user.allergy5; // use for loops to go through the 5 things in the array (array.length) \n\n    for (let i = 0; i < allergies.length; i++) {\n      if (allergies[i] === null || allergies[i] === 'undefined') {\n        allergies = allergies.splice(0, i);\n        break;\n      }\n    } // turn array into comma separated list\n\n\n    const allergyString = allergies.join(',');\n    console.log(allergyString);\n    this.setState({\n      allergies: allergyString\n    }); // get calories and make calories state\n\n    this.setState({\n      calories: user.calories\n    }); // get diet and account for 'none' and make diet state\n\n    this.setState({\n      diet: user.diet\n    });\n  }\n\n  async fetchMeals() {\n    console.log('fetch meals');\n    let counter = 0;\n\n    if (!this.state.calories) {\n      await this.getUserInfo();\n    }\n\n    console.log(this.state.calories);\n    console.log(this.state.diet);\n    console.log(this.state.allergies);\n    await fetch(\"https://api.spoonacular.com/recipes/mealplans/generate?\" + \"apiKey=048a26721a2a416a944e45becc2d10aa&timeFrame=day\" + \"&targetCalories=\" + this.state.calories + \"&diet=\" + this.state.diet + \"&exclude\" + this.state.allergies).then(response => response.json()).then(data => {\n      this.setState(prevState => ({\n        data: data,\n        refreshes: prevState.refreshes + 1\n      }));\n      counter++;\n\n      if (counter === 1) {\n        this.fetchRecipes();\n      }\n\n      ;\n    });\n  }\n\n  async fetchRecipes() {\n    console.log('fetch recipes');\n    let counter = 0;\n\n    for (let i = 0; i < 3; i++) {\n      await fetch(\"https://api.spoonacular.com/recipes/\" + this.state.data.meals[i].id + \"/information?apiKey=048a26721a2a416a944e45becc2d10aa\" + \"&includeNutrition=true\").then(response => response.json()).then(data => {\n        let tempRecipes = this.state.recipes.slice(0);\n        tempRecipes.push(data);\n        console.log(data);\n        this.setState({\n          recipes: tempRecipes\n        });\n        counter++;\n      });\n\n      if (counter === 3) {\n        this.makeFood();\n      }\n    }\n  }\n\n  makeFood() {\n    console.log('make food');\n\n    for (let i = 0; i < 3; i++) {\n      let tempFood = this.state.food.slice(0);\n      const oneFood = {\n        id: i + 1,\n        name: this.state.data.meals[i].title,\n        imageSource: \"https://spoonacular.com/recipeImages/\" + this.state.data.meals[i].id + \"-240x150.jpg\",\n        prepTime: this.state.data.meals[i].readyInMinutes,\n        calories: Math.round(this.state.recipes[i].nutrition.nutrients[0].amount),\n        percentCarbs: this.state.recipes[i].nutrition.caloricBreakdown.percentCarbs,\n        percentFat: this.state.recipes[i].nutrition.caloricBreakdown.percentFat,\n        percentProtein: this.state.recipes[i].nutrition.caloricBreakdown.percentProtein,\n        servings: this.state.recipes[i].servings,\n        ingredients: this.state.recipes[i].nutrition.ingredients,\n        instructions: this.state.recipes[i].instructions\n      };\n      tempFood.push(oneFood);\n      this.setState({\n        food: tempFood\n      });\n    }\n  }\n\n  render() {\n    if (this.state.food.length !== 3) {\n      return React.createElement(\"div\", {\n        className: \"Meals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"CallToAction\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Come back tomorrow for more!\"), React.createElement(\"p\", {\n        className: \"Loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    const totalCals = this.state.data.nutrients.calories;\n    const totalCarbs = this.state.data.nutrients.carbohydrates;\n    const totalFat = this.state.data.nutrients.fat;\n    const totalProtein = this.state.data.nutrients.protein;\n    const mealSections = this.state.food.map(food => React.createElement(MealSection, {\n      key: food.id,\n      data: food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"Meals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CallToAction\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Come back tomorrow for more!\"), React.createElement(\"h3\", {\n      className: \"MealSubtitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"If you want new options, just hit refresh! You're limited to 5 refreshes per day.\"), React.createElement(FontAwesomeIcon, {\n      icon: faRedo,\n      className: \"RefreshIcon\",\n      onClick: () => this.fetchMeals(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(MealSummary, {\n      cals: totalCals,\n      carbs: totalCarbs,\n      fat: totalFat,\n      protein: totalProtein,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), mealSections);\n  }\n\n}\n\nexport default Meals;","map":{"version":3,"sources":["/Users/Rebecca/Documents/soph/comp20/final/InShape/client/src/Meals.js"],"names":["React","MealSection","MealSummary","FontAwesomeIcon","faRedo","Meals","Component","constructor","state","loading","calories","diet","allergies","data","recipes","food","refreshes","getUserInfo","bind","fetchMeals","fetchRecipes","makeFood","componentDidMount","setState","setTimeout","Array","console","log","props","username","response","fetch","json","user","allergy1","allergy2","allergy3","allergy4","allergy5","i","length","splice","allergyString","join","counter","then","prevState","meals","id","tempRecipes","slice","push","tempFood","oneFood","name","title","imageSource","prepTime","readyInMinutes","Math","round","nutrition","nutrients","amount","percentCarbs","caloricBreakdown","percentFat","percentProtein","servings","ingredients","instructions","render","totalCals","totalCarbs","carbohydrates","totalFat","fat","totalProtein","protein","mealSections","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,aAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAK,KADD;AAGXC,MAAAA,QAAQ,EAAI,EAHD;AAIXC,MAAAA,IAAI,EAAQ,EAJD;AAKXC,MAAAA,SAAS,EAAG,EALD;AAOXC,MAAAA,IAAI,EAAQ,IAPD;AAQXC,MAAAA,OAAO,EAAK,EARD;AASXC,MAAAA,IAAI,EAAQ,EATD;AAWXC,MAAAA,SAAS,EAAG,CAAC;AAXF,KAAb;AAcA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AAEA,SAAKC,UAAL,GAAoB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAApB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,QAAL,GAAoB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAApB;AACD;;AAED,QAAMI,iBAAN,GAA0B;AAExB,SAAKC,QAAL,CAAe;AACbd,MAAAA,OAAO,EAAG;AADG,KAAf;AAIAe,IAAAA,UAAU,CAAC,YAAY;AACrB,YAAM,KAAKL,UAAL,EAAN;AACD,KAFS,EAEP,IAFO,CAAV;AAIA,SAAKI,QAAL,CAAc;AACZd,MAAAA,OAAO,EAAG;AADE,KAAd;AAGD;;AAED,QAAMQ,WAAN,GAAoB;AAClB,QAAIL,SAAS,GAAG,IAAIa,KAAJ,CAAU,CAAV,CAAhB,CADkB,CACY;;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,QAAvB;AAEA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,KAAKH,KAAL,CAAWC,QAAvB,CAA5B,CAJkB,CAI4C;;AAC9DH,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,UAAME,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB,CANkB,CAMiB;;AACnCN,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AAEA,UAAMC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAjB;AAEApB,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeqB,IAAI,CAACC,QAApB;AACAtB,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeqB,IAAI,CAACE,QAApB;AACAvB,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeqB,IAAI,CAACG,QAApB;AACAxB,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeqB,IAAI,CAACI,QAApB;AACAzB,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeqB,IAAI,CAACK,QAApB,CAfkB,CAiBhB;;AACA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG3B,SAAS,CAAC4B,MAA/B,EAAuCD,CAAC,EAAxC,EAA6C;AAC3C,UAAK3B,SAAS,CAAC2B,CAAD,CAAT,KAAiB,IAAjB,IAAyB3B,SAAS,CAAC2B,CAAD,CAAT,KAAiB,WAA/C,EAA6D;AAC3D3B,QAAAA,SAAS,GAAGA,SAAS,CAAC6B,MAAV,CAAiB,CAAjB,EAAoBF,CAApB,CAAZ;AACA;AACD;AACF,KAvBe,CAyBlB;;;AACA,UAAMG,aAAa,GAAG9B,SAAS,CAAC+B,IAAV,CAAe,GAAf,CAAtB;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYe,aAAZ;AAEE,SAAKnB,QAAL,CAAc;AACZX,MAAAA,SAAS,EAAG8B;AADA,KAAd,EA7BgB,CAiClB;;AACA,SAAKnB,QAAL,CAAc;AACZb,MAAAA,QAAQ,EAAGuB,IAAI,CAACvB;AADJ,KAAd,EAlCkB,CAsClB;;AACA,SAAKa,QAAL,CAAc;AACZZ,MAAAA,IAAI,EAAGsB,IAAI,CAACtB;AADA,KAAd;AAGD;;AAED,QAAMQ,UAAN,GAAmB;AAEjBO,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,QAAIiB,OAAO,GAAG,CAAd;;AACA,QAAK,CAAC,KAAKpC,KAAL,CAAWE,QAAjB,EAA4B;AAC1B,YAAM,KAAKO,WAAL,EAAN;AACD;;AAEDS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWE,QAAvB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWG,IAAvB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWI,SAAvB;AAEA,UAAMmB,KAAK,CAAC,4DACJ,uDADI,GAEJ,kBAFI,GAEiB,KAAKvB,KAAL,CAAWE,QAF5B,GAEuC,QAFvC,GAEkD,KAAKF,KAAL,CAAWG,IAF7D,GAGJ,UAHI,GAGS,KAAKH,KAAL,CAAWI,SAHrB,CAAL,CAIHiC,IAJG,CAIEf,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EAJd,EAKHa,IALG,CAKEhC,IAAI,IAAI;AACZ,WAAKU,QAAL,CAAcuB,SAAS,KAAK;AAC1BjC,QAAAA,IAAI,EAAQA,IADc;AAE1BG,QAAAA,SAAS,EAAG8B,SAAS,CAAC9B,SAAV,GAAsB;AAFR,OAAL,CAAvB;AAIA4B,MAAAA,OAAO;;AACP,UAAKA,OAAO,KAAK,CAAjB,EAAqB;AACnB,aAAKxB,YAAL;AACD;;AAAA;AACF,KAdG,CAAN;AAeD;;AAED,QAAMA,YAAN,GAAqB;AAEnBM,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAIiB,OAAO,GAAG,CAAd;;AACA,SAAM,IAAIL,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA8B;AAE5B,YAAMR,KAAK,CAAC,yCACE,KAAKvB,KAAL,CAAWK,IAAX,CAAgBkC,KAAhB,CAAsBR,CAAtB,EAAyBS,EAD3B,GAEE,sDAFF,GAGE,wBAHH,CAAL,CAIHH,IAJG,CAIEf,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EAJd,EAKHa,IALG,CAKEhC,IAAI,IAAI;AACZ,YAAIoC,WAAW,GAAG,KAAKzC,KAAL,CAAWM,OAAX,CAAmBoC,KAAnB,CAAyB,CAAzB,CAAlB;AACAD,QAAAA,WAAW,CAACE,IAAZ,CAAiBtC,IAAjB;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACA,aAAKU,QAAL,CAAc;AACZT,UAAAA,OAAO,EAAGmC;AADE,SAAd;AAGAL,QAAAA,OAAO;AACR,OAbG,CAAN;;AAeE,UAAKA,OAAO,KAAK,CAAjB,EAAqB;AACnB,aAAKvB,QAAL;AACD;AACJ;AACF;;AAEDA,EAAAA,QAAQ,GAAG;AAETK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,SAAM,IAAIY,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA8B;AAC5B,UAAIa,QAAQ,GAAG,KAAK5C,KAAL,CAAWO,IAAX,CAAgBmC,KAAhB,CAAsB,CAAtB,CAAf;AACA,YAAMG,OAAO,GAAG;AACdL,QAAAA,EAAE,EAAeT,CAAC,GAAG,CADP;AAEde,QAAAA,IAAI,EAAa,KAAK9C,KAAL,CAAWK,IAAX,CAAgBkC,KAAhB,CAAsBR,CAAtB,EAAyBgB,KAF5B;AAGdC,QAAAA,WAAW,EAAM,0CAA0C,KAAKhD,KAAL,CAAWK,IAAX,CAAgBkC,KAAhB,CAAsBR,CAAtB,EAAyBS,EAAnE,GAAwE,cAH3E;AAIdS,QAAAA,QAAQ,EAAS,KAAKjD,KAAL,CAAWK,IAAX,CAAgBkC,KAAhB,CAAsBR,CAAtB,EAAyBmB,cAJ5B;AAKdhD,QAAAA,QAAQ,EAASiD,IAAI,CAACC,KAAL,CAAW,KAAKpD,KAAL,CAAWM,OAAX,CAAmByB,CAAnB,EAAsBsB,SAAtB,CAAgCC,SAAhC,CAA0C,CAA1C,EAA6CC,MAAxD,CALH;AAMdC,QAAAA,YAAY,EAAK,KAAKxD,KAAL,CAAWM,OAAX,CAAmByB,CAAnB,EAAsBsB,SAAtB,CAAgCI,gBAAhC,CAAiDD,YANpD;AAOdE,QAAAA,UAAU,EAAO,KAAK1D,KAAL,CAAWM,OAAX,CAAmByB,CAAnB,EAAsBsB,SAAtB,CAAgCI,gBAAhC,CAAiDC,UAPpD;AAQdC,QAAAA,cAAc,EAAG,KAAK3D,KAAL,CAAWM,OAAX,CAAmByB,CAAnB,EAAsBsB,SAAtB,CAAgCI,gBAAhC,CAAiDE,cARpD;AASdC,QAAAA,QAAQ,EAAS,KAAK5D,KAAL,CAAWM,OAAX,CAAmByB,CAAnB,EAAsB6B,QATzB;AAUdC,QAAAA,WAAW,EAAM,KAAK7D,KAAL,CAAWM,OAAX,CAAmByB,CAAnB,EAAsBsB,SAAtB,CAAgCQ,WAVnC;AAWdC,QAAAA,YAAY,EAAK,KAAK9D,KAAL,CAAWM,OAAX,CAAmByB,CAAnB,EAAsB+B;AAXzB,OAAhB;AAcAlB,MAAAA,QAAQ,CAACD,IAAT,CAAcE,OAAd;AAEA,WAAK9B,QAAL,CAAc;AACZR,QAAAA,IAAI,EAAGqC;AADK,OAAd;AAGD;AACF;;AAEDmB,EAAAA,MAAM,GAAG;AAEP,QAAK,KAAK/D,KAAL,CAAWO,IAAX,CAAgByB,MAAhB,KAA2B,CAAhC,EAAoC;AAClC,aACE;AAAK,QAAA,SAAS,EAAG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAG,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAIE;AAAG,QAAA,SAAS,EAAG,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CADF;AAUD;;AAED,UAAMgC,SAAS,GAAM,KAAKhE,KAAL,CAAWK,IAAX,CAAgBiD,SAAhB,CAA0BpD,QAA/C;AACA,UAAM+D,UAAU,GAAK,KAAKjE,KAAL,CAAWK,IAAX,CAAgBiD,SAAhB,CAA0BY,aAA/C;AACA,UAAMC,QAAQ,GAAO,KAAKnE,KAAL,CAAWK,IAAX,CAAgBiD,SAAhB,CAA0Bc,GAA/C;AACA,UAAMC,YAAY,GAAG,KAAKrE,KAAL,CAAWK,IAAX,CAAgBiD,SAAhB,CAA0BgB,OAA/C;AAGA,UAAMC,YAAY,GAAG,KAAKvE,KAAL,CAAWO,IAAX,CAAgBiE,GAAhB,CAAoBjE,IAAI,IAC3C,oBAAC,WAAD;AACE,MAAA,GAAG,EAAIA,IAAI,CAACiC,EADd;AAEE,MAAA,IAAI,EAAIjC,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB,CAArB;AAOA,WACE;AAAK,MAAA,SAAS,EAAG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAG,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,EAIE;AAAI,MAAA,SAAS,EAAG,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2FAJF,EAOE,oBAAC,eAAD;AACE,MAAA,IAAI,EAAIX,MADV;AAEE,MAAA,SAAS,EAAG,aAFd;AAGE,MAAA,OAAO,EAAI,MAAM,KAAKe,UAAL,EAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAYE,oBAAC,WAAD;AACE,MAAA,IAAI,EAAOqD,SADb;AAEE,MAAA,KAAK,EAAMC,UAFb;AAGE,MAAA,GAAG,EAAQE,QAHb;AAIE,MAAA,OAAO,EAAIE,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,EAkBGE,YAlBH,CADF;AAsBD;;AAxNiC;;AA2NpC,eAAe1E,KAAf","sourcesContent":["import React from 'react';\n\nimport MealSection from './MealSection';\n\nimport './Meals.css';\nimport MealSummary from './MealSummary';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\n\nclass Meals extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading   : false,\n\n      calories  : '',\n      diet      : '',\n      allergies : '',\n\n      data      : null,\n      recipes   : [],\n      food      : [],\n\n      refreshes : -1\n    };\n\n    this.getUserInfo = this.getUserInfo.bind(this);\n\n    this.fetchMeals   = this.fetchMeals.bind(this);\n    this.fetchRecipes = this.fetchRecipes.bind(this);\n    this.makeFood     = this.makeFood.bind(this);\n  }\n\n  async componentDidMount() {\n\n    this.setState ({\n      loading : true\n    });\n\n    setTimeout(async () => {\n      await this.fetchMeals();\n    }, 3000);\n\n    this.setState({\n      loading : false\n    });\n  }\n\n  async getUserInfo() {\n    let allergies = new Array(5); // initialize allergies array\n    console.log(this.props.username)\n\n    const response = await fetch('/info/' + this.props.username); // get data\n    console.log(response)\n    const json = await response.json() // data to json\n    console.log(json);\n\n    const user = json[0]\n\n    allergies[0] = user.allergy1;\n    allergies[1] = user.allergy2;\n    allergies[2] = user.allergy3;\n    allergies[3] = user.allergy4; \n    allergies[4] = user.allergy5;\n\n      // use for loops to go through the 5 things in the array (array.length) \n      for ( let i = 0; i < allergies.length; i++ ) { \n        if ( allergies[i] === null || allergies[i] === 'undefined' ) {\n          allergies = allergies.splice(0, i);\n          break;\n        }\n      }\n\n    // turn array into comma separated list\n    const allergyString = allergies.join(',');\n    console.log(allergyString)\n\n      this.setState({\n        allergies : allergyString\n      });\n\n    // get calories and make calories state\n    this.setState({\n      calories : user.calories\n    });\n\n    // get diet and account for 'none' and make diet state\n    this.setState({\n      diet : user.diet\n    });\n  }\n\n  async fetchMeals() {\n\n    console.log('fetch meals')\n    let counter = 0;\n    if ( !this.state.calories ) {\n      await this.getUserInfo();\n    }\n\n    console.log(this.state.calories)\n    console.log(this.state.diet)\n    console.log(this.state.allergies)\n\n    await fetch(\"https://api.spoonacular.com/recipes/mealplans/generate?\" \n          + \"apiKey=048a26721a2a416a944e45becc2d10aa&timeFrame=day\"\n          + \"&targetCalories=\" + this.state.calories + \"&diet=\" + this.state.diet \n          + \"&exclude\" + this.state.allergies)\n      .then(response => response.json())\n      .then(data => {\n        this.setState(prevState => ({\n          data      : data,\n          refreshes : prevState.refreshes + 1\n        }));\n        counter++;\n        if ( counter === 1 ) {\n          this.fetchRecipes();\n        };\n      });\n  }\n\n  async fetchRecipes() {\n\n    console.log('fetch recipes')\n    let counter = 0;\n    for ( let i = 0; i < 3; i++ ) {\n      \n      await fetch(\"https://api.spoonacular.com/recipes/\" \n                  + this.state.data.meals[i].id \n                  + \"/information?apiKey=048a26721a2a416a944e45becc2d10aa\"\n                  + \"&includeNutrition=true\")\n        .then(response => response.json())\n        .then(data => {\n          let tempRecipes = this.state.recipes.slice(0);\n          tempRecipes.push(data);\n          console.log(data)\n          this.setState({\n            recipes : tempRecipes\n          });  \n          counter++;\n        });\n\n        if ( counter === 3 ) {\n          this.makeFood();\n        }\n    }\n  }\n\n  makeFood() {\n\n    console.log('make food')\n    for ( let i = 0; i < 3; i++ ) {\n      let tempFood = this.state.food.slice(0);\n      const oneFood = {\n        id             : i + 1,\n        name           : this.state.data.meals[i].title,\n        imageSource    : \"https://spoonacular.com/recipeImages/\" + this.state.data.meals[i].id + \"-240x150.jpg\",\n        prepTime       : this.state.data.meals[i].readyInMinutes,\n        calories       : Math.round(this.state.recipes[i].nutrition.nutrients[0].amount),\n        percentCarbs   : this.state.recipes[i].nutrition.caloricBreakdown.percentCarbs,\n        percentFat     : this.state.recipes[i].nutrition.caloricBreakdown.percentFat,\n        percentProtein : this.state.recipes[i].nutrition.caloricBreakdown.percentProtein,\n        servings       : this.state.recipes[i].servings,\n        ingredients    : this.state.recipes[i].nutrition.ingredients,\n        instructions   : this.state.recipes[i].instructions\n      }\n\n      tempFood.push(oneFood);\n\n      this.setState({\n        food : tempFood\n      });\n    }\n  }\n\n  render() {\n\n    if ( this.state.food.length !== 3 ) {\n      return (\n        <div className = \"Meals\">\n          <p className = \"CallToAction\">\n            Come back tomorrow for more!\n          </p>\n          <p className = \"Loading\">\n            Loading...\n          </p>\n        </div>\n      )\n    }\n\n    const totalCals    = this.state.data.nutrients.calories;\n    const totalCarbs   = this.state.data.nutrients.carbohydrates;\n    const totalFat     = this.state.data.nutrients.fat;\n    const totalProtein = this.state.data.nutrients.protein;\n    \n\n    const mealSections = this.state.food.map(food => \n      <MealSection\n        key = {food.id}\n        data = {food}\n      />\n    );\n\n    return(\n      <div className = \"Meals\">\n        <p className = \"CallToAction\">\n          Come back tomorrow for more! \n        </p>\n        <h3 className = \"MealSubtitle\">\n          If you want new options, just hit refresh! You're limited to 5 refreshes per day.\n        </h3>\n        <FontAwesomeIcon \n          icon = {faRedo} \n          className = \"RefreshIcon\"\n          onClick = {() => this.fetchMeals()}\n        />\n        <MealSummary \n          cals    = {totalCals} \n          carbs   = {totalCarbs}\n          fat     = {totalFat}\n          protein = {totalProtein}\n        />\n        {mealSections}\n      </div>\n    )\n  }\n}\n\nexport default Meals;"]},"metadata":{},"sourceType":"module"}