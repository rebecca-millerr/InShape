{"ast":null,"code":"var _jsxFileName = \"/Users/Rebecca/Documents/soph/comp20/final/InShape/client/src/Meals.js\";\nimport React from 'react';\nimport MealSection from './MealSection';\nimport './Meals.css';\nimport MealSummary from './MealSummary';\n\nclass Meals extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      calories: null,\n      diet: null,\n      allergies: null,\n      data: null,\n      recipes: [],\n      food: []\n    };\n    this.fetchMeals = this.fetchMeals.bind(this);\n    this.fetchRecipes = this.fetchRecipes.bind(this);\n    this.makeFood = this.makeFood.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    let allergies = new Array(5); // initialize allergies array\n\n    const response = await fetch('/info/' + this.props.username); // get data\n\n    console.log(response);\n    const json = response.json(); // data to json\n\n    console.log(json);\n    allergies[0] = json.allergy1;\n    allergies[1] = json.allergy2;\n    allergies[2] = json.allergy3;\n    allergies[3] = json.allergy4;\n    allergies[4] = json.allergy5; // turn array into comma separated list\n\n    document.write(allergies.toString()); // use for loops to go through the 5 things in the array (array.length) \n\n    for (const i of allergies) {\n      if (allergies[i] = 'none') {\n        return null;\n      } else {\n        console.log(allergies[i]);\n      }\n    }\n\n    this.setState({\n      allergies: allergies\n    }); // get calories and make calories state\n\n    const calories = json.calories;\n    console.log(calories);\n    this.setState({\n      calories: calories\n    }); // get diet and account for 'none' and make diet state\n\n    const diet = json.diet;\n    console.log(diet);\n\n    if (diet == 'none') {\n      diet = 'null';\n    } else {\n      diet = diet;\n    }\n\n    this.setState({\n      diet: diet\n    }); // assign state from diet, calories, and this.state.allergies from allergies\n\n    this.setState({\n      calories: 1800,\n      diet: 'none',\n      allergies: 'peanut'\n    }, this.fetchMeals);\n    this.setState({\n      loading: false\n    });\n  }\n\n  fetchMeals() {\n    let counter = 0;\n    fetch(\"https://api.spoonacular.com/recipes/mealplans/generate?\" + \"apiKey=048a26721a2a416a944e45becc2d10aa&timeFrame=day\" + \"&targetCalories=\" + this.state.calories + \"&diet=\" + this.state.diet + \"&exclude\" + this.state.allergies).then(response => response.json()).then(data => {\n      this.setState({\n        data: data\n      });\n      counter++;\n\n      if (counter === 1) {\n        this.fetchRecipes();\n      }\n\n      ;\n    });\n  }\n\n  async fetchRecipes() {\n    let counter = 0;\n\n    for (let i = 0; i < 3; i++) {\n      await fetch(\"https://api.spoonacular.com/recipes/\" + this.state.data.meals[i].id + \"/information?apiKey=048a26721a2a416a944e45becc2d10aa\" + \"&includeNutrition=true\").then(response => response.json()).then(data => {\n        let tempRecipes = this.state.recipes.slice(0);\n        tempRecipes.push(data);\n        this.setState({\n          recipes: tempRecipes\n        });\n        counter++;\n      });\n\n      if (counter === 3) {\n        this.makeFood();\n      }\n    }\n  }\n\n  makeFood() {\n    for (let i = 0; i < 3; i++) {\n      let tempFood = this.state.food.slice(0);\n      const oneFood = {\n        id: i + 1,\n        name: this.state.data.meals[i].title,\n        prepTime: this.state.data.meals[i].readyInMinutes,\n        percentCarbs: this.state.recipes[i].nutrition.caloricBreakdown.percentCarbs,\n        percentFat: this.state.recipes[i].nutrition.caloricBreakdown.percentFat,\n        percentProtein: this.state.recipes[i].nutrition.caloricBreakdown.percentProtein,\n        ingredients: this.state.recipes[i].nutrition.ingredients,\n        instructions: this.state.recipes[i].instructions\n      };\n      tempFood.push(oneFood);\n      this.setState({\n        food: tempFood\n      });\n    }\n  }\n\n  render() {\n    // TODO: get rid of console logs\n    // TODO: sort out images\n    //var $image = $('<img>').attr(\"src\",\"https://spoonacular.com/recipeImages/\" + data.meals[i].id + \"-240x150.jpg\");\n    if (this.state.food.length !== 3) {\n      return React.createElement(\"div\", {\n        className: \"Meals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"CallToAction\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Come back tomorrow for more!\"), React.createElement(\"p\", {\n        className: \"Loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    const totalCals = this.state.data.nutrients.calories;\n    const totalCarbs = this.state.data.nutrients.carbohydrates;\n    const totalFat = this.state.data.nutrients.fat;\n    const totalProtein = this.state.data.nutrients.protein;\n    const mealSections = this.state.food.map(food => React.createElement(MealSection, {\n      key: food.id,\n      data: food,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"Meals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"CallToAction\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Come back tomorrow for more!\"), React.createElement(MealSummary, {\n      cals: totalCals,\n      carbs: totalCarbs,\n      fat: totalFat,\n      protein: totalProtein,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), mealSections);\n  }\n\n}\n\nexport default Meals;","map":{"version":3,"sources":["/Users/Rebecca/Documents/soph/comp20/final/InShape/client/src/Meals.js"],"names":["React","MealSection","MealSummary","Meals","Component","constructor","state","loading","calories","diet","allergies","data","recipes","food","fetchMeals","bind","fetchRecipes","makeFood","componentDidMount","setState","Array","response","fetch","props","username","console","log","json","allergy1","allergy2","allergy3","allergy4","allergy5","document","write","toString","i","counter","then","meals","id","tempRecipes","slice","push","tempFood","oneFood","name","title","prepTime","readyInMinutes","percentCarbs","nutrition","caloricBreakdown","percentFat","percentProtein","ingredients","instructions","render","length","totalCals","nutrients","totalCarbs","carbohydrates","totalFat","fat","totalProtein","protein","mealSections","map"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport MealSection from './MealSection';\n\nimport './Meals.css';\nimport MealSummary from './MealSummary';\n\nclass Meals extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading   : false,\n\n      calories  : null,\n      diet      : null,\n      allergies : null,\n\n      data      : null,\n      recipes   : [],\n      food      : []\n    };\n\n    this.fetchMeals   = this.fetchMeals.bind(this);\n    this.fetchRecipes = this.fetchRecipes.bind(this);\n    this.makeFood     = this.makeFood.bind(this);\n  }\n\n  async componentDidMount() {\n\n    this.setState ({\n      loading : true\n    });\n\n    let allergies = new Array(5); // initialize allergies array\n\n      const response = await fetch('/info/' + this.props.username); // get data\n      console.log(response)\n      const json = response.json() // data to json\n      console.log(json);\n\n        allergies[0] = json.allergy1;\n        allergies[1] = json.allergy2;\n        allergies[2] = json.allergy3;\n        allergies[3] = json.allergy4; \n        allergies[4] = json.allergy5;\n      \n\n      // turn array into comma separated list\n      document.write(allergies.toString())\n\n      // use for loops to go through the 5 things in the array (array.length) \n      for (const i of allergies) { \n        if (allergies[i] = 'none') {\n          return null\n        }\n        else {\n          console.log(allergies[i]);\n        }\n      }\n      this.setState({\n        allergies : allergies\n      });\n\n    // get calories and make calories state\n    const calories = json.calories \n    console.log(calories)\n\n    this.setState({\n      calories : calories\n    });\n\n    // get diet and account for 'none' and make diet state\n    const diet = json.diet \n    console.log(diet)\n    if (diet == 'none') {\n      diet = 'null'\n    }\n    else {\n      diet = diet\n    }\n\n    this.setState({\n      diet : diet\n    });\n\n    // assign state from diet, calories, and this.state.allergies from allergies\n\n    this.setState({\n      calories  : 1800,\n      diet      : 'none',\n      allergies : 'peanut',\n    }, this.fetchMeals);\n\n    this.setState({\n      loading : false\n    });\n  }\n\n  fetchMeals() {\n\n    let counter = 0;\n    fetch(\"https://api.spoonacular.com/recipes/mealplans/generate?\" \n          + \"apiKey=048a26721a2a416a944e45becc2d10aa&timeFrame=day\"\n          + \"&targetCalories=\" + this.state.calories + \"&diet=\" + this.state.diet \n          + \"&exclude\" + this.state.allergies)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          data : data\n        });\n        counter++;\n        if ( counter === 1 ) {\n          this.fetchRecipes();\n        };\n      });\n  }\n\n  async fetchRecipes() {\n\n    let counter = 0;\n    for ( let i = 0; i < 3; i++ ) {\n      \n      await fetch(\"https://api.spoonacular.com/recipes/\" \n                  + this.state.data.meals[i].id \n                  + \"/information?apiKey=048a26721a2a416a944e45becc2d10aa\"\n                  + \"&includeNutrition=true\")\n        .then(response => response.json())\n        .then(data => {\n          let tempRecipes = this.state.recipes.slice(0);\n          tempRecipes.push(data);\n          this.setState({\n            recipes : tempRecipes\n          });  \n          counter++;\n        });\n\n        if ( counter === 3 ) {\n          this.makeFood();\n        }\n    }\n  }\n\n  makeFood() {\n\n    for ( let i = 0; i < 3; i++ ) {\n      let tempFood = this.state.food.slice(0);\n      const oneFood = {\n        id             : i + 1,\n        name           : this.state.data.meals[i].title,\n        prepTime       : this.state.data.meals[i].readyInMinutes,\n        percentCarbs   : this.state.recipes[i].nutrition.caloricBreakdown.percentCarbs,\n        percentFat     : this.state.recipes[i].nutrition.caloricBreakdown.percentFat,\n        percentProtein : this.state.recipes[i].nutrition.caloricBreakdown.percentProtein,\n        ingredients    : this.state.recipes[i].nutrition.ingredients,\n        instructions   : this.state.recipes[i].instructions\n      }\n\n      tempFood.push(oneFood);\n\n      this.setState({\n        food : tempFood\n      });\n    }\n  }\n\n  render() {\n\n    // TODO: get rid of console logs\n    // TODO: sort out images\n\n    //var $image = $('<img>').attr(\"src\",\"https://spoonacular.com/recipeImages/\" + data.meals[i].id + \"-240x150.jpg\");\n\n    if ( this.state.food.length !== 3 ) {\n      return (\n        <div className = \"Meals\">\n          <p className = \"CallToAction\">\n            Come back tomorrow for more!\n          </p>\n          <p className = \"Loading\">\n            Loading...\n          </p>\n        </div>\n      )\n    }\n\n    const totalCals    = this.state.data.nutrients.calories;\n    const totalCarbs   = this.state.data.nutrients.carbohydrates;\n    const totalFat     = this.state.data.nutrients.fat;\n    const totalProtein = this.state.data.nutrients.protein;\n    \n\n    const mealSections = this.state.food.map(food => \n      <MealSection\n        key = {food.id}\n        data = {food}\n      />\n    );\n\n    return(\n      <div className = \"Meals\">\n        <p className = \"CallToAction\">\n          Come back tomorrow for more!\n        </p>\n        <MealSummary \n          cals    = {totalCals} \n          carbs   = {totalCarbs}\n          fat     = {totalFat}\n          protein = {totalProtein}\n        />\n        {mealSections}\n      </div>\n    )\n  }\n}\n\nexport default Meals;"]},"metadata":{},"sourceType":"module"}